# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import minichat_pb2 as minichat__pb2


class mcServerServicerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MessageStream = channel.unary_stream(
                '/minichat.mcServerServicer/MessageStream',
                request_serializer=minichat__pb2.Req_User.SerializeToString,
                response_deserializer=minichat__pb2.Resp_MessageToClient.FromString,
                )
        self.CommandStream = channel.unary_stream(
                '/minichat.mcServerServicer/CommandStream',
                request_serializer=minichat__pb2.Req_MessageToServer.SerializeToString,
                response_deserializer=minichat__pb2.Resp_MessageToClient.FromString,
                )
        self.AliveSignal = channel.unary_unary(
                '/minichat.mcServerServicer/AliveSignal',
                request_serializer=minichat__pb2.Req_User.SerializeToString,
                response_deserializer=minichat__pb2.Resp_AliveToClient.FromString,
                )


class mcServerServicerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def MessageStream(self, request, context):
        """for chat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommandStream(self, request, context):
        """for command
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AliveSignal(self, request, context):
        """for alive(client)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_mcServerServicerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MessageStream': grpc.unary_stream_rpc_method_handler(
                    servicer.MessageStream,
                    request_deserializer=minichat__pb2.Req_User.FromString,
                    response_serializer=minichat__pb2.Resp_MessageToClient.SerializeToString,
            ),
            'CommandStream': grpc.unary_stream_rpc_method_handler(
                    servicer.CommandStream,
                    request_deserializer=minichat__pb2.Req_MessageToServer.FromString,
                    response_serializer=minichat__pb2.Resp_MessageToClient.SerializeToString,
            ),
            'AliveSignal': grpc.unary_unary_rpc_method_handler(
                    servicer.AliveSignal,
                    request_deserializer=minichat__pb2.Req_User.FromString,
                    response_serializer=minichat__pb2.Resp_AliveToClient.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'minichat.mcServerServicer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class mcServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def MessageStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/minichat.mcServerServicer/MessageStream',
            minichat__pb2.Req_User.SerializeToString,
            minichat__pb2.Resp_MessageToClient.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CommandStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/minichat.mcServerServicer/CommandStream',
            minichat__pb2.Req_MessageToServer.SerializeToString,
            minichat__pb2.Resp_MessageToClient.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AliveSignal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minichat.mcServerServicer/AliveSignal',
            minichat__pb2.Req_User.SerializeToString,
            minichat__pb2.Resp_AliveToClient.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
